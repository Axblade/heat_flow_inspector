// Version 0.9.2
function ptp_name_new = choosePTPDialog(ptp_name)
  ptp_name_new = ptp_name;
  list_number = x_choose(["Однородный ПТП";...
  "Двухсоставной неоднородный ПТП с контактным тепловым сопротивлением";...
  "Двухсоставной неоднородный ПТП с идеальным тепловым контактом";...
  "Комбинированный ПТП с воздушной прослойкой";...
  "ПТП типа Гардона"; "Однородный ПТП типа полуограниченного тела";...
  "Однородный ПТП на полуограниченном теле с контактным тепловым сопротивлением";...
  "Однородный ПТП на полуограниченном теле с идеальным тепловым контактом";...
  "Двухсоставной неоднородный ПТП на полуограниченном теле с идеальным тепловым контактом";...
  "Батарейный ПТП"; "Высокотемпературный ПТП без защитной пластины";...
  "Высокотемпературный ПТП с защитной пластиной"],...
  'Дважды щелкните по нужному ПТП в списке', 'Отменить');
  select list_number
  case 1 then
    ptp_name_new = 'ptp1';
  case 2 then
    ptp_name_new = 'ptp2';
  case 3 then
    ptp_name_new = 'ptp2_1';
  case 4 then
    ptp_name_new = 'ptp3';
  case 5 then
    ptp_name_new = 'ptp4';         
  case 6 then
    ptp_name_new = 'ptp5';
  case 7 then
    ptp_name_new = 'ptp6';
  case 8 then
    ptp_name_new = 'ptp6_1';
  case 9 then
    ptp_name_new = 'ptp6_2';  
  case 10 then
    ptp_name_new = 'ptp7';
  case 11 then
    ptp_name_new = 'ptp8';
  case 12 then
    ptp_name_new = 'ptp8_1';    
  end
endfunction

function ptp_new = editPTPDialog(ptp)
  ptp_new = ptp;
  ptp_type = typeof(ptp);
  ptp_str = [];
  select ptp_type
  case 'ptp1' then
    ptp_str = x_mdialog([string(ptp.name_ru)], ['Теплопроводность, Вт/(м·К)';...
    'Температуропроводность, м²/c'; 'Высота ПТП, м'; 'Количество блоков';...
    'Тип граничных условий сверху'; 'Тип граничных условий снизу';...
    'Коэффициент теплообмена сверху, Вт/(м²·К)';...
    'Коэффициент теплообмена снизу, Вт/(м²·К)'],...
    [string(ptp.lambda); string(ptp.a); string(ptp.h); string(ptp.blocks);...
    string(ptp.GU1type); string(ptp.GU2type); string(ptp.alpha1);...
    string(ptp.alpha2)])
  case 'ptp2' then
    ptp_str = x_mdialog([string(ptp.name_ru)],...
    ['Теплопроводность верхней половины ПТП, Вт/(м·К)';...
    'Теплопроводность нижней половины ПТП, Вт/(м·К)';...
    'Температуропроводность верхней половины ПТП, м²/c';...
    'Температуропроводность нижней половины ПТП, м²/c';...
    'Высота верхней половины ПТП, м'; 'Высота нижней половины ПТП, м';...
    'Количество блоков сверху'; 'Количество блоков снизу';...
    'Контактное тепловое сопротивление, (м²·К)/Вт';...
    'Тип граничных условий сверху'; 'Тип граничных условий снизу';...
    'Коэффициент теплообмена сверху, Вт/(м²·К)';...
    'Коэффициент теплообмена снизу, Вт/(м²·К)'],...
    [string(ptp.lambda1); string(ptp.lambda2); string(ptp.a1); string(ptp.a2);...
    string(ptp.h1); string(ptp.h2); string(ptp.blocks1); string(ptp.blocks2);...
    string(ptp.Rk); string(ptp.GU1type); string(ptp.GU2type);...
    string(ptp.alpha1); string(ptp.alpha2)])
  case 'ptp2_1' then
    ptp_str = x_mdialog([string(ptp.name_ru)],...
    ['Теплопроводность верхней половины ПТП, Вт/(м·К)';...
    'Теплопроводность нижней половины ПТП, Вт/(м·К)';...
    'Температуропроводность верхней половины ПТП, м²/c';...
    'Температуропроводность нижней половины ПТП, м²/c';...
    'Высота верхней половины ПТП, м'; 'Высота нижней половины ПТП, м';...
    'Количество блоков сверху'; 'Количество блоков снизу';...
    'Тип граничных условий сверху'; 'Тип граничных условий снизу';...
    'Коэффициент теплообмена сверху, Вт/(м²·К)';...
    'Коэффициент теплообмена снизу, Вт/(м²·К)'],...
    [string(ptp.lambda1); string(ptp.lambda2); string(ptp.a1); string(ptp.a2);...
    string(ptp.h1); string(ptp.h2); string(ptp.blocks1); string(ptp.blocks2);...
    string(ptp.GU1type); string(ptp.GU2type); string(ptp.alpha1); string(ptp.alpha2)])
  case 'ptp3' then
    ptp_str = x_mdialog([string(ptp.name_ru)],...
    ['Теплопроводность верхней половины ПТП, Вт/(м·К)';...
    'Теплопроводность нижней половины ПТП, Вт/(м·К)';...
    'Теплопроводность воздушной прослойки, Вт/(м·К)';...
    'Температуропроводность верхней половины ПТП, м²/c';...
    'Температуропроводность нижней половины ПТП, м²/c';...
    'Высота верхней половины ПТП, м'; 'Высота нижней половины ПТП, м';...
    'Высота воздушной прослойки, м'; 'Количество блоков сверху';...
    'Количество блоков снизу'; 'Тип граничных условий сверху';...
    'Тип граничных условий снизу'; 'Коэффициент теплообмена сверху, Вт/(м²·К)';...
    'Коэффициент теплообмена снизу, Вт/(м²·К)'],...
    [string(ptp.lambda1); string(ptp.lambda2); string(ptp.lambda3);...
    string(ptp.a1); string(ptp.a2); string(ptp.h1); string(ptp.h2);...
    string(ptp.h3); string(ptp.blocks1); string(ptp.blocks2);...
    string(ptp.GU1type); string(ptp.GU2type); string(ptp.alpha1);...
    string(ptp.alpha2)])
  case 'ptp4' then
    ptp_str = x_mdialog([string(ptp.name_ru)], ['Теплопроводность, Вт/(м·К)';...
    'Температуропроводность, м²/c'; 'Количество блоков'; 'Тип граничных условий';...
    'Коэффициент теплообмена, Вт/(м²·К)'; 'Радиус диска, м';...
    'Контактное тепловое сопротивление, (м²·К)/Вт'; 'Высота ПТП, м'],...
    [string(ptp.lambda); string(ptp.a); string(ptp.blocks); string(ptp.GUtype);...
    string(ptp.alpha); string(ptp.R); string(ptp.Rk); string(ptp.h)])
  case 'ptp5' then
    ptp_str = x_mdialog([string(ptp.name_ru)], ['Теплопроводность, Вт/(м·К)';...
    'Температуропроводность, м²/c'; 'Высота отдельного блока, м';...
    'Показатель степени при неравномерной разбивке';...
    'Количнство блоков'; 'Тип граничных условий';...
    'Коэффициент теплообмена, Вт/(м²·К)'],...
    [string(ptp.lambda); string(ptp.a); string(ptp.delta); string(ptp.m);...
    string(ptp.blocks); string(ptp.GUtype); string(ptp.alpha)])
  case 'ptp6' then
    ptp_str = x_mdialog([string(ptp.name_ru)],...
    ['Теплопроводность верхней половины ПТП, Вт/(м·К)';...
    'Теплопроводность нижней половины ПТП, Вт/(м·К)';...
    'Температуропроводность верхней половины ПТП, м²/c';...
    'Температуропроводность нижней половины ПТП, м²/c';...
    'Высота верхней половины ПТП, м';...
    'Высота отдельного блока второй половины, м';...
    'Показатель степени при неравномерной разбивке';...
    'Количество блоков сверху'; 'Количество блоков снизу';...
    'Контактное тепловое сопротивление, (м²·К)/Вт';...
    'Тип граничных условий'; 'Коэффициент теплообмена, Вт/(м²·К)'],...
    [string(ptp.lambda1); string(ptp.lambda2); string(ptp.a1); string(ptp.a2);...
    string(ptp.h1); string(ptp.delta2); string(ptp.m2); string(ptp.blocks1);...
    string(ptp.blocks2); string(ptp.Rk); string(ptp.GUtype); string(ptp.alpha)])  
  case 'ptp6_1' then
    ptp_str = x_mdialog([string(ptp.name_ru)],...
    ['Теплопроводность верхней половины ПТП, Вт/(м·К)';...
    'Теплопроводность нижней половины ПТП, Вт/(м·К)';...
    'Температуропроводность верхней половины ПТП, м²/c';...
    'Температуропроводность нижней половины ПТП, м²/c';...
    'Высота верхней половины ПТП, м';...
    'Высота отдельного блока второй половины, м';...
    'Показатель степени при неравномерной разбивке';...
    'Количество блоков сверху'; 'Количество блоков снизу';...
    'Тип граничных условий'; 'Коэффициент теплообмена, Вт/(м²·К)'],...      
    [string(ptp.lambda1); string(ptp.lambda2); string(ptp.a1); string(ptp.a2);...
    string(ptp.h1); string(ptp.delta2); string(ptp.m2); string(ptp.blocks1);...
    string(ptp.blocks2); string(ptp.GUtype); string(ptp.alpha)])      
  case 'ptp6_2' then
    ptp_str = x_mdialog([string(ptp.name_ru)],...
    ['Теплопроводность верхней части ПТП, Вт/(м·К)';...
    'Теплопроводность средней части ПТП, Вт/(м·К)';...
    'Теплопроводность нижней части ПТП, Вт/(м·К)';...
    'Температуропроводность верхней части ПТП, м²/c';...
    'Температуропроводность средней части ПТП, м²/c';...
    'Температуропроводность нижней части ПТП, м²/c';...
    'Высота верхней части ПТП, м'; 'Высота средней части ПТП, м';...
    'Высота отдельного блока нижней части, м';...
    'Показатель степени при неравномерной разбивке';...
    'Количество блоков верхней части'; 'Количество блоков средней части';...
    'Количество блоков нижней части'; 'Тип граничных условий';...
    'Коэффициент теплообмена, Вт/(м²·К)'],...      
    [string(ptp.lambda1); string(ptp.lambda2); string(ptp.lambda3);...
    string(ptp.a1); string(ptp.a2); string(ptp.a3); string(ptp.h1);...
    string(ptp.h2); string(ptp.delta3); string(ptp.m3); string(ptp.blocks1);...
    string(ptp.blocks2); string(ptp.blocks3); string(ptp.GUtype);...
    string(ptp.alpha)])          
  case 'ptp7' then
    ptp_str = x_mdialog([string(ptp.name_ru)],...
    ['Теплопроводность верхней части ПТП, Вт/(м·К)';...
    'Теплопроводность средней части ПТП, Вт/(м·К)';...
    'Теплопроводность нижней части ПТП, Вт/(м·К)';...
    'Температуропроводность верхней части ПТП, м²/c';...
    'Температуропроводность средней части ПТП, м²/c';...
    'Температуропроводность нижней части ПТП, м²/c';...
    'Высота верхней части ПТП, м'; 'Высота средней части ПТП, м';...
    'Высота нижней части ПТП, м'; 'Количество блоков верхней части';...
    'Количество блоков средней части'; 'Количество блоков нижней части'; ...
    'Тип граничных условий сверху'; 'Тип граничных условий снизу';...      
    'Коэффициент теплообмена сверху, Вт/(м²·К)';...
    'Коэффициент теплообмена снизу, Вт/(м²·К)'],...    
    [string(ptp.lambda1); string(ptp.lambda2); string(ptp.lambda3);...
    string(ptp.a1); string(ptp.a2); string(ptp.a3); string(ptp.h1);...
    string(ptp.h2); string(ptp.h3); string(ptp.blocks1); string(ptp.blocks2);...
    string(ptp.blocks3); string(ptp.GU1type); string(ptp.GU2type);...
    string(ptp.alpha1); string(ptp.alpha2)])         
  case 'ptp8' then
    ptp_str = x_mdialog([string(ptp.name_ru)],...
    ['Теплопроводность термометра сопротивления, Вт/(м·К)';...
    'Теплопроводность пластины, Вт/(м·К)';...
    'Температуропроводность термометра сопротивления, м²/c';...
    'Температуропроводность пластины, м²/c'; 'Высота ПТП, м';...
    'Контактное сопротивление'; 'Количество блоков'],...
    [string(ptp.lambda1); string(ptp.lambda2); string(ptp.a1); string(ptp.a2);...
    string(ptp.h); string(ptp.Rk); string(ptp.blocks)])   
  case 'ptp8_1' then
    ptp_str = x_mdialog([string(ptp.name_ru)],...
    ['Теплопроводность термометра сопротивления, Вт/(м·К)';...
    'Теплопроводность основной пластины, Вт/(м·К)';...
    'Теплопроводность защитной пластины, Вт/(м·К)';...
    'Температуропроводность термометра сопротивления, м²/c';...
    'Температуропроводность основной пластины, м²/c';...
    'Температуропроводность защитной пластины, м²/c';...
    'Высота защитной пластины, м'; 'Высота основной пластины, м';...
    'Количество блоков в защитной пластине';...
    'Количество блоков в основной пластине';...
    'Сопротивление между защитной пластиной и термометром сопротивления, (м²·К)/Вт';...
    'Сопротивление между пластиной и корпусом, (м²·К)/Вт'],...
    [string(ptp.lambda1); string(ptp.lambda2); string(ptp.lambda3);...
    string(ptp.a1); string(ptp.a2); string(ptp.a3); string(ptp.h1);... 
    string(ptp.h2); string(ptp.blocks1); string(ptp.blocks2); string(ptp.Rk1);...
    string(ptp.Rk2)])
  end
  if ptp_str <> [] then
    for i=1:1:length(ptp_new) - 2;
      ptp_new(i + 2) = evstr(ptp_str(i));
    end      
  end
  
endfunction

function name_new = chooseRuleDialog(name)
  name_new = name;
  list_number = x_choose(["Линейная"; "Синус"; "Экспонента";...
  "Импульсы"; "B-сплайны 1-го порядка"],...
  'Дважды щелкните по нужной зависимости в списке',...
  'Отменить');
  select list_number
  case 1 then
    name_new = 'linear';
  case 2 then
    name_new = 'harmonic';
  case 3 then
    name_new = 'exponential';
  case 4 then
    name_new = 'impulse';      
  case 5 then
    name_new = 'spline';      
  end
endfunction

function rule_new = editRuleDialog(rule)
  rule_new = rule;
  rule_type = typeof(rule);
  rule_str = [];
  select rule_type
  case "linear" then
    rule_str = x_mdialog(['Зависимость значений ГУ';...
    'Линейная: f = a + b * t'],...
    ['a:'; 'b:'], [string(rule.a); string(rule.b)]);
  case "harmonic" then
    rule_str = x_mdialog(['Зависимость значений ГУ';...
    'Синус: f = a + b * sin(w * t)'],...
    ['a:'; 'b:'; 'w:'], [string(rule.a); string(rule.b); string(rule.w)]);
  case "exponential" then
    rule_str = x_mdialog(['Зависимость значений ГУ';...
    'Экспонента: f = a + b * exp(w * t)'],...
    ['a:'; 'b:'; 'w:'], [string(rule.a); string(rule.b); string(rule.w)]);
  case "impulse" then
    rule_str = x_mdialog(['Зависимость значений ГУ';...
    'Импульсы: [t1 dt1 f1; t2 dt2 f2]'],...
    ['A:'], [strcat(sci2exp(rule.A))]);
  case "spline" then
    rule_str = x_mdialog(['Зависимость значений ГУ';...
    'B-сплайны 1-го порядка: [t1 f1; t2 f2]'],...
    ['A:'], [strcat(sci2exp(rule.A))]);
  end
  if rule_str <> [] then
    for i=1:1:length(rule_new) - 1;
      rule_new(i + 1) = evstr(rule_str(i));
    end      
  end  
endfunction

function [time_new, dt_new] = editTimeDialog(time, dt)
  time_new = time;
  dt_new = dt;
  time_str = [];
  time_str = x_mdialog(['Время наблюдения'],...
  ['Общее время : '; 'Временной шаг : '], [string(time); string(dt)]);
  if time_str <> [] then
    time_new = evstr(time_str(1));
    dt_new = evstr(time_str(2));  
  end
endfunction

function To_new = editToDialog(To)
  To_new = To;
  col = 'Блок №';
  label = col(ones(size(To, 'r'),1))+string((1:size(To, 'r'))');
  To_str = x_mdialog('Начальное распределение', label, string(To));
  if To_str <> [] then
    To_new = evstr(To_str);
  end
endfunction

function H_new = editHDialog(measurements, H)
  if measurements <> size(H, 'r') then
    H = resize_matrix(H, measurements, size(H, 'c'));
  end
  H_new = H;
  H_temp = x_matrix('Матрица измерений', H);  
  if H_temp <> [] then 
    H_new = H_temp; 
  end; 
endfunction

function Y_new = editYDialog(Y)
  Y_new = Y;
  Y_temp = x_matrix('Вектор измерений Y', Y);  
  if Y_temp <> [] then 
    Y_new = Y_temp; 
  end; 
endfunction

function Q_new = editQDialog(Q)
  Q_new = Q;
  Q_temp = x_matrix('Вектор параметров Q', Q);  
  if Q_temp <> [] then 
    Q_new = Q_temp; 
  end; 
endfunction

function Eps_new = editEpsDialog(measurements, Eps)
  if measurements <> size(Eps, 'r') then
    Eps = resize_matrix(Eps, measurements, size(Eps, 'c'));
  end
  Eps_new = Eps;
  Eps_temp = x_matrix('Вектор погрешностей', Eps);  
if Eps_temp <> [] then Eps_new = Eps_temp; end;
endfunction

function R = getR(dim, Eps)
  for i = 1: 1: dim;
    for j = 1: 1: dim;
      if i == j then
        if Eps(i) == 0
          R(i, j) = 0.01;
        else
          R(i, j) = Eps(i)^2;
        end
      else
        R(i, j) = 0;
      end
    end
  end
endfunction

function savePTP(ptp)
  fn = uiputfile(['*.ptp', 'Файл данных ПТП'], '', 'Сохранение данных ПТП');
  if fn <> "" then
    ptp_saved = ptp;
    save(fn, ptp_saved);
  end
endfunction

function ptp_new = loadPTP(ptp)
  global('general');    
  fn = uigetfile(['*.ptp', 'Файл данных ПТП'], '', 'Загрузка данных ПТП');
  if fn <> "" then
    load(fn, 'ptp_saved');
    ptp_new = updatePTP(ptp, ptp_saved);
    general.ptp_name = typeof(ptp_new);   
  else
    ptp_new = ptp;
  end
endfunction

function ptp_new = changePTP(ptp)
  ptp_new = updatePTP(ptp, editPTPDialog(ptp));
endfunction

function ptp_new = updatePTP(ptp, ptp_temp)
  global('general');
  if max(bool2s(ptp_temp <> ptp)) == 1 then
    ptp = ptp_temp;
    general.blocks = getBlocks(ptp);
    general.GU1type = getGU1type(ptp);
    general.GU2type = getGU2type(ptp);
    set(edit_blocks, "string", string(general.blocks));
    general.To = zeros(general.blocks, 1);
    set(edit_To, "string",sci2exp(general.To));
    set(edit_GU1type, "string", string(general.GU1type));
    set(edit_GU2type, "string", string(general.GU2type));
    general.H = eye(general.measurements, general.blocks);
  end
  ptp_new = ptp;
endfunction

function saveRule(rule)
  fn = uiputfile(['*.u', 'Файл данных ГУ'], '', 'Сохранение данных ГУ');
  if fn <> "" then
    rule_saved = rule;
    save(fn, rule_saved);
  end
endfunction

function rule_new = loadRule(rule, isUp)
  global('general');  
  fn = uigetfile(['*.u', 'Файл данных ГУ'], '', 'Загрузка данных ГУ');
  if fn <> "" then
    load(fn, 'rule_saved');
    rule_new = rule_saved;
    if isUp then
      general.rule1_name = typeof(rule_new);
    else
      general.rule2_name = typeof(rule_new);
    end
  else
    rule_new = rule;
  end
endfunction

function saveF(F)
  fn = uiputfile(['*.f', 'Матрицы обратных связей'], '', 'Сохранение матрицы F');
  if fn <> "" then
    if getos() == 'Windows' then unix('del '+fn);
    else unix('rm -f '+fn); end
    write(fn, F);
  end
endfunction

function saveG(G)
  fn = uiputfile(['*.g', 'Матрицы управления'], '', 'Сохранение матрицы G');
  if fn <> "" then
    if getos() == 'Windows' then unix('del '+fn);
    else unix('rm -f '+fn); end    
    write(fn, G);
  end
endfunction

///////////////////////////////////////////
// Solver helpers                        //
///////////////////////////////////////////

// solve sensivity of solution
// general.* and result.* variables are used here
function solveSensivity() 
	[Hqa, Hqb] = getHH(general.To, general.F, general.G, general.H, ...
		general.U(1:general.sp_length + 1,:), general.dt, ...
		general.sp_length, general.U(1,1), general.U(general.sp_length + 1,1),...
		general.dq, general.sp_length);
	
	// plotting
	f_direct = figure("figure_name", "Чувствительность",...
		"Position",[0 0 dialog_width dialog_height],...
		"BackgroundColor",[1 1 1]);
	plot(Hqa(1, :));
	plot(Hqb(1, :));
	xlabel('k');
	ylabel('U, К*м2/Вт');    
	xgrid(1);
endfunction

// solve dynamic responce 
// general.* and result.* variables are used here
function solveDynResp() 
	sl = syslin('c', general.F, general.G, general.H);
			
	// lowering order of function
	// TODO: classic YxY matrix is needed 
	if general.dynresp_lower == 1 then
		sl = minss(sl);
	end
	
	L = ss2tf(sl);
	minT = min(5, general.time);
	t = 0:0.01:minT;
	
	messagebox("Передаточная функция: " + prettyprint(L(:, 1), "latex"), "Передаточная функция");
	disp(L(:, 1));
	//messagebox("Передаточная функция: " + string(L(:, 1)), "Передаточная функция");
	// transition function
	f_trans = figure("figure_name", "Динамические характеристики: переходная",...
			"Position",[0 0 dialog_width dialog_height],...
			"BackgroundColor",[1 1 1]);
	plot2d([t',t'],[(csim('impulse', t, L(:, 1)))',0*t']);
	// impulse function
	f_impulse = figure("figure_name", "Динамические характеристики: импульсно-переходная",...
			"Position",[0 0 dialog_width dialog_height],...
			"BackgroundColor",[1 1 1]);  
	plot2d([t',t'],[(csim('step', t, L(:, 1)))',0*t']);
	// Bode function
	f_bode = figure("figure_name", "Динамические характеристики: частотные характеристики",...
			"Position",[0 0 dialog_width dialog_height],...
			"BackgroundColor",[1 1 1]);
	bode(L(:, 1));
	
	// if some additional dynresp functions are needed (Evans, Nyquist, Black)
	if general.dynresp_additional == 1 then
		// evans one
		f_evans = figure("figure_name", "Динамические характеристики: Эванс",...
			"Position",[0 0 dialog_width dialog_height],...
			"BackgroundColor",[1 1 1]);
		evans(L(:, 1));
		// nyquist one 
		f_nyquist = figure("figure_name", "Динамические характеристики: Найквист",...
			"Position",[0 0 dialog_width dialog_height],...
			"BackgroundColor",[1 1 1]);
		nyquist(L(:, 1));
		// black one
		f_black = figure("figure_name", "Динамические характеристики: Николс",...
			"Position",[0 0 dialog_width dialog_height],...
			"BackgroundColor",[1 1 1]);
		black(L(:, 1));
	end
endfunction	

// used to show matrix's when show matrix flag is put
// general.* and result.* variables are used here
function showMatrices() 
	f_cov = figure("figure_name", "Ковариационная матрица",...
	    "Position", [0 0 dialog_width dialog_height],...
	    "BackgroundColor",[1 1 1]);
	plot(results.P(1, :), 'b');
	plot(results.P(2, :), 'g');    
	f_sense = figure("figure_name", "Функции чувствительности",...
	"Position", [0 0 dialog_width dialog_height],...
	"BackgroundColor",[1 1 1]);
	plot(results.HH(:, 1), 'b');
	plot(results.HH(:, 2), 'g');
	f_sense = figure("figure_name", "Весовая матрица",...
	    "Position", [0 0 dialog_width dialog_height],...
	    "BackgroundColor",[1 1 1]);
	plot(results.K(1, :), 'b');
	plot(results.K(2, :), 'g');
endfunction

// used to show SDO ellipse when sdo flag is put
// general.* and result.* variables are used here
function solveSdo()
	[Hqa, Hqb] = getHH(general.To, general.F, general.G, general.H, ...
			general.U(1:general.sp_length + 1,:), general.dt, ...
			general.sp_length, general.U(1,1), general.U(general.sp_length + 1,1),...
			general.dq, general.sp_length);
	f_direct = figure("figure_name", "СДО",...
	"Position",[0 0 dialog_width dialog_height],...
	"BackgroundColor",[1 1 1]);
	[x, y, z] = getSDO(Hqa, Hqb, general.sp_length, general.B)
	contour(x, y, z, [0, 0]);
	xlabel('qb, Вт/м2');
	ylabel('qa, Вт/м2');    
	xgrid(1);
endfunction

// used to solve direct problem in non-realtime mode
// takes 'fig' parameter to draw graphs on it
// general.* and result.* variables are used here
function solveDirectOnce(fig)
	Y = getYall(general.To, general.F, general.G, general.H, ...
			general.U, general.dt, general.sp_length, general.sp_total, general.Eps);
    scf(fig);
	clf(fig);
	tau = 0:general.dt:general.sp_length * general.sp_total * general.dt;
	subplot(2,1,1);
	xgrid(1);
	xlabel('время, с');
	ylabel('тепловой поток, Вт/м2');    
	plot(tau, general.U(:, 1), 'b');
	plot(tau, general.U(:, 2), 'g');    
	subplot(2,1,2);
	xgrid(1);
	xlabel('время, с');
	ylabel('температура, °C');
	for i=1:1:size(Y, 'r')
		plot(tau, Y(i, :));
	end
endfunction

// used to solve inverse problem in non-realtime mode
// takes 'fig' parameter to draw graphs on it
// general.* and result.* variables are used here
function solveInverseOnce(fig)
	if general.isFromFile == 1 then
		results.Yreal = general.Y;
	else
		results.Yreal = getYall(general.To, general.F, general.G, general.H, ...
		general.U, general.dt, general.sp_length, general.sp_total, general.Eps)
	end
	
	scf(fig);
	clf(fig);
	tau = 0:general.dt:general.sp_length * general.sp_total * general.dt;               
	subplot(2,1,1);
	xgrid(1);
	xlabel('время, с');
	ylabel('температура, °C');
	for i=1:1:size(results.Yreal, 'r')
		plot(tau, results.Yreal(i, :), 'b');
	end
	
	// Measure time consumed by Qinv. Start timer
	tic();
	
	[results.Qest, results.Qhist, results.Yinv, results.P, results.HH, results.K, results.deltaQ] = ...
		getQYall(general.To, general.F, general.G, ...
		general.H, general.U(:, 2), general.dt, general.sp_length, general.qo,...
		general.dq, general.po, general.R, general.Eps, general.sp_total, results.Yreal, general.B);
	tau = general.dt:general.dt:general.sp_length * general.sp_total * general.dt;
	
	// Stop timer and show results
	t = toc();
	disp(t);
	
	for i=1:1:size(results.Yinv, 'r')
		plot(tau, results.Yinv(i, :), 'r');
	end
	results.Yinv = [general.H * general.To results.Yinv];
	Y_RMS = sqrt(norm(results.Yinv - results.Yreal)^2/size(results.Yinv, 'c'));
	xtitle("СКО = " + string(Y_RMS));    
	subplot(2,1,2);
	a1=gca(); 
	tau = 0:general.dt*general.sp_length:general.sp_length * general.sp_total * general.dt; 
	rule = tlist(['spline';'A']);
	rule.A = [];
	for i=1:1:size(results.Qest, 'c');
		rule.A = [rule.A; tau(i) results.Qest(i)];
	end
	U1_ext = getU(rule, general.dt, general.sp_length * general.sp_total);
	Q_RMS = sqrt(norm(U1_ext - general.U(:,1))^2/size(U1_ext, 'r'));
	xtitle("СКО = " + string(Q_RMS));
	xgrid(1);
	xlabel('время, с');
	ylabel('тепловой поток, Вт/м2');
	plot(tau, results.Qest, 'r');
	
	if general.showDelta == 1 then
		plot(tau, results.Qest + results.deltaQ, 'm-.');
		plot(tau, results.Qest - results.deltaQ, 'm-.');    
	end
	
	tau = 0:general.dt:general.sp_length * general.sp_total * general.dt;
	plot(tau, general.U(:, 1), 'b');
	plot(tau, general.U(:, 2), 'g');

	if general.QFromFile == 1 then
		plot(tau, general.Q, 'b');
		l1=a1.children.children(1);
		l1.mark_style=0;
		l1.mark_foreground=2;
		l1.mark_size=4;
	end 
	
	if general.showMatrices == 1 then 
		showMatrices();
	end  
endfunction		

///////////////////////////////////////////
// Problem solving                       //
///////////////////////////////////////////
function solveProblems()
	// get data from input
    global('general');
    global('results');
    general.realtime = get(realtime_checkbox, "Value");
    general.direct = get(direct_checkbox, "Value");
	general.sensivity = get(sensivity_checkbox, "Value");
	general.sdo = get(sdo_checkbox, "Value");
	general.inverse = get(inverse_checkbox, "Value");
	general.dynresp = get(dynresp_checkbox, "Value");
	general.dynresp_additional = get(dynresp_add_checkbox, "Value");
	general.dynresp_lower = get(dynresp_lower_checkbox, "Value");
	general.isFromFile  = get(from_file_checkbox, "Value");
	general.showMatrices  = get(show_matrices_checkbox, "Value");
	general.showDelta  = get(show_delta_checkbox, "Value");
	general.QFromFile  = get(Q_checkbox, "Value");
	general.sp_length = evstr(get(edit_sp_length, "String"));
	general.sp_total = floor(general.dt_total/general.sp_length);
	general.qo = evstr(get(edit_qo, "String"));
	general.po = evstr(get(edit_po, "String"));
	general.dq = evstr(get(edit_dq, "String"));
	[general.F, general.G] = getFG(ptp);
	general.R = getR(size(general.H, 'r'), general.Eps);
	general.U = [getU(rule1, general.dt, general.sp_length * general.sp_total),...
	getU(rule2, general.dt, general.sp_length * general.sp_total)];
	
    // grphic windows
	// direct solution
    if general.direct == 1 then
        f_direct = figure("figure_name", "Прямая задача",...
			        "Position",[0 0 dialog_width dialog_height],...
			        "BackgroundColor",[1 1 1]);
    end

	// inverse solution
    if general.inverse == 1 then
        f_inverse = figure("figure_name", "Обратная задача",...
			        "Position",[0 0 dialog_width dialog_height],...
			        "BackgroundColor",[1 1 1]);
    end
    
    // solving
    if general.realtime == 0 then
		// if not in realtime
		disp("static solution");
		if general.direct == 1 then
			solveDirectOnce(f_direct);
		end  

		if general.sensivity == 1 then 
			solveSensivity();
		end  
	
		if general.sdo == 1 then
			solveSdo();
		end  
	
		if general.inverse == 1 then  
			solveInverseOnce(f_inverse);
		end
    
		if general.dynresp == 1 then
			solveDynResp();
		end
	else
		// here code for realtime solving
		// if direct and indirect solution is not selected
		if general.direct == 0 & general.inverse == 0 then
			messagebox('Не выбран тип задачи', 'Ошибка');
			return 0;
		end
		// otherwise
		i = 0;
		matrices_are_shown = 0; // for showMatrices case (just to solve and render it once)
        // h=openserial(1,"9600,n,8,1"); no serial port here :(
		while (i < 10)
            i = i + 1;
            //[q, flags] = readserial(h);
            if general.direct == 1 then
			    Y = getYall(general.To, general.F, general.G, general.H, ...
			    general.U, general.dt, general.sp_length, general.sp_total, general.Eps);
			    tau = 0:general.dt:general.sp_length * general.sp_total * general.dt;			    
				scf(f_direct);
				clf(f_direct,'reset');
                subplot(2,1,1);
			    xgrid(1);
			    xlabel('время, с');
			    ylabel('тепловой поток, Вт/м2');    
			    plot(tau, general.U(:, 1), 'b');
			    plot(tau, general.U(:, 2), 'g');    
			    subplot(2,1,2);
			    xgrid(1);
			    xlabel('время, с');
			    ylabel('температура, °C');
			    for i=1:1:size(Y, 'r')
				    plot(tau, Y(i, :));
			    end
		    end

            if general.inverse == 1 then
			    if general.isFromFile == 1 then
				    results.Yreal = general.Y;
			    else
				    results.Yreal = getYall(general.To, general.F, general.G, general.H, ...
				    general.U, general.dt, general.sp_length, general.sp_total, general.Eps)
			    end
	
				scf(f_direct);
			    tau = 0:general.dt:general.sp_length * general.sp_total * general.dt;				
			    subplot(2,1,1);
			    xgrid(1);
			    xlabel('время, с');
			    ylabel('температура, °C');
			    for i=1:1:size(results.Yreal, 'r')
				    plot(tau, results.Yreal(i, :), 'b');
			    end
	
			    // Measure time consumed by Qinv. Start timer
			    tic();
	
			    [results.Qest, results.Qhist, results.Yinv, results.P, results.HH, results.K, results.deltaQ] = ...
			    getQYall(general.To, general.F, general.G, ...
			    general.H, general.U(:, 2), general.dt, general.sp_length, general.qo,...
			    general.dq, general.po, general.R, general.Eps, general.sp_total, results.Yreal, general.B);
			    tau = general.dt:general.dt:general.sp_length * general.sp_total * general.dt;
	
			    // Stop timer and show results
			    t = toc();
			    disp(t);
	
			    for i=1:1:size(results.Yinv, 'r')
				    plot(tau, results.Yinv(i, :), 'r');
			    end
			    results.Yinv = [general.H * general.To results.Yinv];
			    Y_RMS = sqrt(norm(results.Yinv - results.Yreal)^2/size(results.Yinv, 'c'));
			    xtitle("СКО = " + string(Y_RMS));    
			    subplot(2,1,2);
			    a1=gca(); 
			    tau = 0:general.dt*general.sp_length:general.sp_length * general.sp_total * general.dt; 
			    rule = tlist(['spline';'A']);
			    rule.A = [];
			    for i=1:1:size(results.Qest, 'c');
				    rule.A = [rule.A; tau(i) results.Qest(i)];
			    end
			    U1_ext = getU(rule, general.dt, general.sp_length * general.sp_total);
			    Q_RMS = sqrt(norm(U1_ext - general.U(:,1))^2/size(U1_ext, 'r'));
			    xtitle("СКО = " + string(Q_RMS));
			    xgrid(1);
			    xlabel('время, с');
			    ylabel('тепловой поток, Вт/м2');
			    plot(tau, results.Qest, 'r');
	
			    if general.showDelta == 1 then
				    plot(tau, results.Qest + results.deltaQ, 'm-.');
				    plot(tau, results.Qest - results.deltaQ, 'm-.');    
			    end
	
			    tau = 0:general.dt:general.sp_length * general.sp_total * general.dt;
			    plot(tau, general.U(:, 1), 'b');
			    plot(tau, general.U(:, 2), 'g');

			    if general.QFromFile == 1 then
				    plot(tau, general.Q, 'b');
				    l1=a1.children.children(1);
				    l1.mark_style=0;
				    l1.mark_foreground=2;
				    l1.mark_size=4;
			    end 
	
			    if general.showMatrices == 1 & matrices_are_shown = 0 then 
					showMatrices();
					matrices_are_shown = 1;
			    end  
		    end
			sleep(10000);
		end
        //closeserial();
    end
endfunction  

global general; 
general = tlist(['problem';'direct';'dynresp';'dynresp_additional';'dynresp_lower';'inverse';'realtime';'sensivity';'isFromFile';'QFromFile'; 'showMatrices'; 'showDelta'; 'sdo';...
	'dt';'time';'dt_total';'sp_length';'sp_total';'ptp_name';...
	'blocks';'GU1type';'GU2type';'F';'G';'rule1_name';'rule2_name';...
	'U';'qo';'po';'dq';'B';'To';'measurements';'H';'Eps';'R';'Y';'Q']);

//List of problems to solve
general.direct = 0;
general.inverse = 0;
general.sensivity = 0;
general.sdo = 0;
general.dynresp = 0;
general.dynresp_additional = 0;
general.dynresp_lower = 0;
general.realtime = 0;
general.isFromFile = 0;
general.QFromFile = 0;
general.showMatrices = 0;
general.showDelta = 0;

//Time sampling properties
general.dt = 0.01;
general.time = 0.1;
general.dt_total = floor(general.time/general.dt);
general.sp_length = 10;
general.sp_total = floor(general.dt_total/general.sp_length);

//
general.ptp_name = 'ptp1';
ptp = getPTP(general.ptp_name);
general.blocks = getBlocks(ptp);
general.GU1type = getGU1type(ptp);

general.GU2type = getGU2type(ptp);

//
general.rule1_name = 'linear';
general.rule2_name = 'linear';
rule1 = getRule(general.rule1_name);
rule2 = getRule(general.rule2_name);

general.qo = 100;
general.po = 1e12;
general.dq = 0.01;

general.B = 5.99;

general.To = zeros(general.blocks, 1);
general.measurements = 1;
general.H = eye(general.measurements, general.blocks);
general.Y = zeros(general.measurements, general.dt_total + 1);
general.Q = zeros(general.measurements, general.dt_total + 1);
general.Eps = zeros(general.measurements, 1);

general.R = getR(size(general.H, 'r'), general.Eps);

global results;
results = tlist(['result';'Yreal';'Qest';'Qhist';'Yinv';'P';'HH';'K'; 'deltaQ']);

///////////////////////////////////////////////////
//                    GUI                        //
///////////////////////////////////////////////////
dialog_width = 430;
dialog_height = 640;
control_width = 200;
control_height = 20;

// Creating new figure
f = figure("figure_name", "Heat Flow Inspector",...
"Position",[200 200 dialog_width dialog_height],...
"BackgroundColor",[0.9 0.9 0.9]);

// ============
// Панель "ПТП"
// ============
frame_PTP= uicontrol(f, "Position"  , [10 dialog_height-9*control_height control_width-5 control_height*8],...
"Style"     , "frame",...
"BackgroundColor",[0.9 0.9 0.9]); 
text_PTP_panel_name = uicontrol(f, "Position"  , [20 dialog_height - 1.5*control_height 25 control_height],...
"Style"     , "text",...
"String"    , "ПТП",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_ptp_name = uicontrol(f, "Position"  , [15 dialog_height - 2.5*control_height control_width-15 control_height],...
"Style"     , "edit",...
"String"    , ptp.name_ru,...
"Enable", "off",...
"BackgroundColor",[1 1 1]);	
text_blocks = uicontrol(f, "Position"  , [15 dialog_height - 4*control_height (control_width-15)/2 control_height],...
"Style"     , "text",...
"String"    , "Число блоков : ",...
"horizontalalignment","right",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_blocks = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 4*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.blocks),...
"Enable", "off",...
"BackgroundColor",[1 1 1]);
text_GU1type = uicontrol(f, "Position"  , [15 dialog_height - 5*control_height (control_width-15)/2 control_height],...
"Style"     , "text",...
"String"    , "ГУ сверху : ",...
"horizontalalignment","right",...		 
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_GU1type = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 5*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.GU1type),...
"Enable", "off",...
"BackgroundColor",[1 1 1]);
text_GU2type = uicontrol(f, "Position"  , [15 dialog_height - 6*control_height (control_width-15)/2 control_height],...
"Style"     , "text",...
"String"    , "ГУ снизу : ",...
"horizontalalignment","right",...		 
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_GU2type = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 6*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.GU2type),...
"Enable", "off",...
"BackgroundColor",[1 1 1]);
b_ChoosePTP = uicontrol(f, "Position"  , [15 dialog_height - 7.5*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Выбрать...",...
"callback"  , "ptp_name_temp = choosePTPDialog(general.ptp_name); if ptp_name_temp <> general.ptp_name then...
  general.ptp_name = ptp_name_temp; ptp = getPTP(general.ptp_name);...
  general.blocks = getBlocks(ptp); general.GU1type = getGU1type(ptp); general.GU2type = getGU2type(ptp);...
  set(edit_ptp_name, ""string"", ptp.name_ru);	set(edit_blocks, ""string"", string(general.blocks));...
  general.To = zeros(general.blocks, 1); set(edit_To, ""string"",sci2exp(general.To));...
  set(edit_GU1type, ""string"", string(general.GU1type)); set(edit_GU2type, ""string"", string(general.GU2type));...
general.H = eye(general.measurements, general.blocks);end;"); 
b_EditPTP = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 7.5*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Изменить...",...
"callback"  , "ptp = changePTP(ptp);"); 
b_SavePTP = uicontrol(f, "Position"  , [15 dialog_height - 8.5*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Сохранить...",...
"callback"  , "savePTP(ptp);"); 
b_LoadPTP = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 8.5*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Загрузить...",...
"callback"  , "ptp = loadPTP(ptp);set(edit_ptp_name, ""string"", ptp.name_ru);"); 

// ======================
// Панель "Матрицы F и G"
// ======================
frame_PTP= uicontrol(f, "Position"  , [10 dialog_height-12.5*control_height control_width-5 control_height*3],...
"Style"     , "frame",...
"BackgroundColor",[0.9 0.9 0.9]); 
text_FG_panel_name = uicontrol(f, "Position"  , [20 dialog_height - 10*control_height 75 control_height],...
"Style"     , "text",...
"String"    , "Матрицы F и G",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
b_showF = uicontrol(f, "Position"  , [15 dialog_height - 11*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Просмотр F",...
"callback"  , "x_matrix(''Матрица обратных связей F'', getFG(ptp));"); 
b_saveF = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 11*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Сохранить F",...
"callback"  , "saveF(getFG(ptp));"); 
b_showG = uicontrol(f, "Position"  , [15 dialog_height - 12*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Просмотр G",...
"callback"  , "[general.F,general.G]=getFG(ptp);x_matrix(''Матрица управления G'', general.G);"); 
b_saveG = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 12*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Cохранить G",...
"callback"  , "[general.F,general.G]=getFG(ptp);saveG(general.G);"); 

// =============================
// Панель "Матрица H и вектор ε"
// =============================
frame_He = uicontrol(f, "Position",...
[10 dialog_height - 16.5*control_height control_width - 5 control_height*3.5],...
"Style"     , "frame",...
"BackgroundColor",[0.9 0.9 0.9]); 
text_He_panel_name = uicontrol(f, "Position"  , [20 dialog_height - 13.5*control_height 115 control_height],...
"Style"     , "text",...
"String"    , "Матрица H и вектор ε",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
text_measurements = uicontrol(f, "Position"  , [13 dialog_height - 14.5*control_height 95 control_height],...
"Style"     , "text",...
"horizontalalignment","right",...		 
"String"    , "Число измерений: ",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_measurements = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 14.5*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.measurements),...
"BackgroundColor",[1 1 1]);
b_EditH = uicontrol(f, "Position"  , [15 dialog_height - 16*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Схема",...
"callback"  , "general.measurements = evstr(get(edit_measurements, ""string""));general.H = editHDialog(general.measurements, general.H);general.Y = zeros(general.measurements, general.dt_total + 1);general.Q = zeros(general.measurements, general.dt_total + 1);"); 
b_EditEps = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 16*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Погрешности",...
"callback"  , "general.measurements = evstr(get(edit_measurements, ""string""));general.Eps = editEpsDialog(general.measurements, general.Eps);"); 

// ===================================
// Панель "Начальное распределение To"
// ===================================
frame_To= uicontrol(f, "Position"  , [10 dialog_height - 20.5*control_height control_width - 5 control_height*3.5],...
"Style"     , "frame",...
"BackgroundColor",[0.9 0.9 0.9]); 
text_To_panel_name = uicontrol(f, "Position"  , [20 dialog_height - 17.5*control_height 155 control_height],...
"Style"     , "text",...
"String"    , " Начальное распределение To",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_To = uicontrol(f, "Position"  , [15 dialog_height - 18.5*control_height control_width-15 control_height],...
"Style"     , "edit",...
"String"    , sci2exp(general.To),...
"Enable", "off",...
"BackgroundColor",[1 1 1]);	
b_EditTo = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 20*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Изменить...",...
"callback"  , "general.To = editToDialog(general.To); set(edit_To, ""string"", sci2exp(general.To));"); 

// ===========================
// Панель "Вектор измерений Y"
// ===========================
frame_Y= uicontrol(f, "Position"  , [10 dialog_height - 24.5*control_height control_width - 5 control_height*3.5],...
"Style"     , "frame",...
"BackgroundColor",[0.9 0.9 0.9]); 
text_Y_panel_name = uicontrol(f, "Position"  , [20 dialog_height - 21.5*control_height 103 control_height],...
"Style"     , "text",...
"String"    , "Вектор измерений Y",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
from_file_checkbox = uicontrol(f, "Position"  , [15 dialog_height - 22.5*control_height control_width-15 control_height],......
"style"              , "checkbox",...
"string"             , "Данные из таблицы",...
"fontsize"           , 10,...
"value"              , general.isFromFile, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "inverse_checkbox");	
b_SetY = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 24*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Задать...",...
"callback"  , "general.Y = editYDialog(general.Y);");

// =========================
// Панель "Время наблюдения"
// =========================
frame_tdt= uicontrol(f, "Position"  , [10 dialog_height - 30.5*control_height control_width-5 control_height*5.5],...
"Style"     , "frame",...
"BackgroundColor",[0.9 0.9 0.9]);
text_tdt_panel_name = uicontrol(f, "Position"  , [20 dialog_height - 25.5*control_height 100 control_height],...
"Style"     , "text",...
"String"    , " Время наблюдения",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
text_time = uicontrol(f, "Position"  , [15 dialog_height - 26.5*control_height (control_width-15)/2 control_height],...
"Style"     , "text",...
"String"    , "Общее время : ",...
"horizontalalignment","right",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_time = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 26.5*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.time),...
"Enable", "off",...
"BackgroundColor",[1 1 1]);
text_dt = uicontrol(f, "Position"  , [15 dialog_height - 27.5*control_height (control_width-15)/2 control_height],...
"Style"     , "text",...
"String"    , "Временной шаг : ",...
"horizontalalignment","right",...		 
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_dt = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 27.5*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.dt),...
"Enable", "off",...
"BackgroundColor",[1 1 1]);
text_dt_total = uicontrol(f, "Position"  , [15 dialog_height - 28.5*control_height (control_width-15)/2 control_height],...
"Style"     , "text",...
"String"    , "Число шагов : ",...
"horizontalalignment","right",...		 
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_dt_total = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 28.5*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.dt_total),...
"Enable", "off",...
"BackgroundColor",[1 1 1]);
b_EditSamplingTime = uicontrol(f, "Position"  , [15+(control_width-15)/2 dialog_height - 30*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Изменить...",...
"callback"  , "[general.time, general.dt] = editTimeDialog(general.time, general.dt);...
general.dt_total = floor(general.time/general.dt);...
general.sp_total = floor(general.dt_total/general.sp_length);...
set(edit_time, ""string"", string(general.time)); set(edit_dt, ""string"", string(general.dt));...
set(edit_dt_total, ""string"", string(floor(general.time/general.dt)));general.Y = zeros(general.measurements, general.dt_total + 1);general.Q = zeros(general.measurements, general.dt_total + 1);");

// =================================
// Панель "Граничное условие сверху"
// =================================
frame_rule1= uicontrol(f, "Position"  , [20 + control_width dialog_height - 5.5*control_height control_width-5 control_height*4.5],...
"Style"     , "frame",...
"BackgroundColor",[0.9 0.9 0.9]); 
text_rule1_panel_name = uicontrol(f, "Position"  , [30 + control_width dialog_height - 1.5*control_height 135 control_height],...
"Style"     , "text",...
"String"    , "Граничное условие сверху",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_rule1 = uicontrol(f, "Position"  , [25 + control_width dialog_height - 2.5*control_height control_width-15 control_height],...
"Style"     , "edit",...
"String"    , getRuleDesc(rule1),...
"Enable", "off",...
"BackgroundColor",[1 1 1]);	
b_ChooseU1 = uicontrol(f, "Position"  , [25 + control_width dialog_height - 4*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Выбрать...",...
"callback"  , "name1_temp = chooseRuleDialog(general.rule1_name); if name1_temp <> general.rule1_name then general.rule1_name = name1_temp;...
rule1 = getRule(general.rule1_name); set(edit_rule1, ""string"", getRuleDesc(rule1));end;"); 
b_EditU1 = uicontrol(f, "Position"  , [25 + control_width+(control_width-15)/2 dialog_height - 4*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Изменить...",...
"callback"  , "rule1 = editRuleDialog(rule1);set(edit_rule1, ""string"", getRuleDesc(rule1));"); 
b_SaveU1 = uicontrol(f, "Position"  , [25 + control_width dialog_height - 5*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Сохранить...",...
"callback"  , "saveRule(rule1);"); 
b_LoadU1 = uicontrol(f, "Position"  , [25 + control_width+(control_width-15)/2 dialog_height - 5*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Загрузить...",...
"callback"  , "rule1 = loadRule(rule1, %T);set(edit_rule1, ""string"", getRuleDesc(rule1))"); 	 

// ================================
// Панель "Граничное условие снизу"
// ================================
frame_rule2= uicontrol(f, "Position"  , [20 + control_width dialog_height - 10.5*control_height control_width-5 control_height*4.5],...
"Style"     , "frame",...
"BackgroundColor",[0.9 0.9 0.9]); 
text_rule2_panel_name = uicontrol(f, "Position"  , [30 + control_width dialog_height - 6.5*control_height 130 control_height],...
"Style"     , "text",...
"String"    , " Граничное условие снизу",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_rule2 = uicontrol(f, "Position"  , [25 + control_width dialog_height - 7.5*control_height control_width-15 control_height],...
"Style"     , "edit",...
"String"    , getRuleDesc(rule2),...
"Enable", "off",...
"BackgroundColor",[1 1 1]);	
b_ChooseU2 = uicontrol(f, "Position"  , [25 + control_width dialog_height - 9*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Выбрать...",...
"callback"  , "name2_temp = chooseRuleDialog(general.rule2_name); if name2_temp <> general.rule2_name then general.rule2_name = name2_temp;...
rule2 = getRule(general.rule2_name); set(edit_rule2, ""string"", getRuleDesc(rule2));end;"); 
b_EditU2 = uicontrol(f, "Position"  , [25 + control_width+(control_width-15)/2 dialog_height - 9*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Изменить...",...
"callback"  , "rule2 = editRuleDialog(rule2);set(edit_rule2, ""string"", getRuleDesc(rule2))"); 
b_SaveU2 = uicontrol(f, "Position"  , [25 + control_width dialog_height - 10*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Сохранить...",...
"callback"  , "saveRule(rule2);"); 
b_LoadU2 = uicontrol(f, "Position"  , [25 + control_width+(control_width-15)/2 dialog_height - 10*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Загрузить...",...
"callback"  , "rule2 = loadRule(rule2, %F);set(edit_rule2, ""string"", getRuleDesc(rule2))"); 

// ==================================
// Панель "Параметры обратной задачи"
// ==================================
frame_inverse_settings= uicontrol(f, "Position"  , [20 + control_width dialog_height - 19.5*control_height control_width-5 control_height*8.5],...
"Style"     , "frame",...
"BackgroundColor",[0.9 0.9 0.9]);	
text_inv_panel_name = uicontrol(f, "Position"  , [30 + control_width dialog_height - 11.5*control_height 150 control_height],...
"Style"     , "text",...
"String"    , "Параметры обратной задачи",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
text_sp_length = uicontrol(f, "Position"  , [25+control_width dialog_height-12.5*control_height (control_width-15)/2 control_height],...
"Style"     , "text",...
"String"    , "Длина сплайна : ",...
"horizontalalignment","right",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_sp_length = uicontrol(f, "Position"  , [25+control_width+(control_width-15)/2 dialog_height-12.5*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.sp_length),...
"Enable", "on",...
"BackgroundColor",[1 1 1]);
text_B = uicontrol(f, "Position"  , [25+control_width dialog_height-13.5*control_height (control_width-15)/2 control_height],...
"Style"     , "text",...
"String"    , "Коэф. В : ",...
"horizontalalignment","right",...		 
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_B = uicontrol(f, "Position"  , [25+control_width+(control_width-15)/2 dialog_height-13.5*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.B),...
"Enable", "on",...
"BackgroundColor",[1 1 1]);
text_qo = uicontrol(f, "Position"  , [25+control_width dialog_height-14.5*control_height (control_width-15)/2 control_height],...
"Style"     , "text",...
"String"    , "qo : ",...
"horizontalalignment","right",...		 
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_qo = uicontrol(f, "Position"  , [25+control_width+(control_width-15)/2 dialog_height-14.5*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.qo),...
"Enable", "on",...
"BackgroundColor",[1 1 1]);
text_po = uicontrol(f, "Position"  , [25+control_width dialog_height-15.5*control_height (control_width-15)/2 control_height],...
"Style"     , "text",...
"String"    , "po : ",...
"horizontalalignment","right",...		 
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_po = uicontrol(f, "Position"  , [25+control_width+(control_width-15)/2 dialog_height-15.5*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.po),...
"Enable", "on",...
"BackgroundColor",[1 1 1]);
text_dq = uicontrol(f, "Position"  , [25+control_width dialog_height-16.5*control_height (control_width-15)/2 control_height],...
"Style"     , "text",...
"String"    , "dq : ",...
"horizontalalignment","right",...		 
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
edit_dq = uicontrol(f, "Position"  , [25+control_width+(control_width-15)/2 dialog_height-16.5*control_height (control_width-15)/2 control_height],...
"Style"     , "edit",...
"String"    , string(general.dq),...
"Enable", "on",...
"BackgroundColor",[1 1 1]);	
show_matrices_checkbox = uicontrol(f, "Position"  , [25 + control_width dialog_height - 18*control_height control_width-15 control_height],......
"style"              , "checkbox",...
"string"             , "Показывать матрицы",...
"fontsize"           , 10,...
"value"              , general.showMatrices, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "inverse_checkbox");	
show_delta_checkbox = uicontrol(f, "Position"  , [25 + control_width dialog_height - 19*control_height control_width-15 control_height],......
"style"              , "checkbox",...
"string"             , "Показывать погрешность",...
"fontsize"           , 10,...
"value"              , general.showDelta, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "inverse_checkbox");

// ============================
// Панель "Поток для сравнения"
// ============================
frame_flow_for_comparison= uicontrol(f, "Position"  , [20 + control_width dialog_height - 23.5*control_height control_width-5 control_height*3.5],...
"Style"     , "frame",...
"BackgroundColor",[0.9 0.9 0.9]);	
text_frame_flow_for_comparison_name = uicontrol(f, "Position"  , [30 + control_width dialog_height - 20.5*control_height 110 control_height],...
"Style"     , "text",...
"String"    , " Поток для сравнения",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
Q_checkbox = uicontrol(f, "Position"  , [25 + control_width dialog_height - 21.5*control_height 185 control_height],......
"style"              , "checkbox",...
"string"             , "Данные из таблицы",...
"fontsize"           , 10,...
"value"              , general.QFromFile, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "inverse_checkbox");
b_set_Q = uicontrol(f, "Position"  , [25 + control_width+(control_width-15)/2 dialog_height - 23*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Задать...",...
"callback"  , "general.Q = editQDialog(general.Q);");

// ========================
// Панель "Решаемые задачи"
// ========================
frame_problems_to_solve= uicontrol(f, "Position"  , [20 + control_width dialog_height - 34*control_height control_width-5 control_height*10],...
"Style"     , "frame",...
"BackgroundColor",[0.9 0.9 0.9]);		 
text_problems_name = uicontrol(f, "Position"  , [30 + control_width dialog_height - 24.5*control_height 105 control_height],...
"Style"     , "text",...
"String"    , " Решаемые задачи",...
"fontsize"  , 10,...
"BackgroundColor",[0.9 0.9 0.9]);
direct_checkbox = uicontrol(f, "Position"  , [25 + control_width dialog_height - 25.5*control_height control_width-15 control_height],......
"style"              , "checkbox",...
"string"             , "Прямая задача",...
"fontsize"           , 10,...
"value"              , general.direct, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "direct_checkbox");
sensivity_checkbox = uicontrol(f, "Position"  , [25 + control_width dialog_height - 26.5*control_height control_width-15 control_height],......
"style"              , "checkbox",...
"string"             , "Матрица чувствительности",...
"fontsize"           , 10,...
"value"              , general.sensivity, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "sensitivity_checkbox");
sdo_checkbox = uicontrol(f, "Position"  , [25 + control_width dialog_height - 27.5*control_height control_width-15 control_height],......
"style"              , "checkbox",...
"string"             , "СДО",...
"fontsize"           , 10,...
"value"              , general.sdo, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "sdo_checkbox");
inverse_checkbox = uicontrol(f, "Position"  , [25 + control_width dialog_height - 28.5*control_height control_width-15 control_height],......
"style"              , "checkbox",...
"string"             , "Обратная задача",...
"fontsize"           , 10,...
"value"              , general.inverse, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "inverse_checkbox");
// added by Eugene
dynresp_checkbox = uicontrol(f, "Position"  , [25 + control_width dialog_height - 29.5*control_height control_width-15 control_height],......
"style"              , "checkbox",...
"string"             , "Динамические характеристики",...
"fontsize"           , 10,...
"value"              , general.dynresp, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "dynresp_checkbox");
dynresp_add_checkbox = uicontrol(f, "Position"  , [35 + control_width dialog_height - 30.5*control_height control_width-25 control_height],......
"style"              , "checkbox",...
"string"             , "дополнительно",...
"fontsize"           , 10,...
"value"              , general.dynresp_additional, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "dynresp_add_checkbox");
dynresp_lower_checkbox = uicontrol(f, "Position"  , [35 + control_width dialog_height - 31.5*control_height control_width-25 control_height],......
"style"              , "checkbox",...
"string"             , "с понижением порядка",...
"fontsize"           , 10,...
"value"              , general.dynresp_lower, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "dynresp_lower_checkbox");
realtime_checkbox = uicontrol(f, "Position"  , [25 + control_width dialog_height - 32.5*control_height control_width-25 control_height],......
"style"              , "checkbox",...
"string"             , "Решение в реальном времени",...
"fontsize"           , 10,...
"value"              , general.realtime, ...
"background"          , [0.9 0.9 0.9], ...
"tag"                , "realtime_checkbox");
// end of Eugenes block		
b_solve = uicontrol(f, "Position"  , [25 + control_width+(control_width-15)/2 dialog_height - 33.5*control_height (control_width-15)/2 control_height],...
"Style"     , "pushbutton",...
"String"    , "Решить",...
"callback"  , "solveProblems();");

// Remove Scilab menus
delmenu(f.figure_id, gettext("&File"));
delmenu(f.figure_id, gettext("&Tools"));
delmenu(f.figure_id, gettext("&Edit"));
delmenu(f.figure_id, gettext("&?"));

// Remove Scilab toolbar
toolbar(f.figure_id, 'off');